{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "classmodbus_master",
    "name": "modbusMaster",
    "url_base": "classmodbus_master",
    "url": "classmodbus_master.html",
    "include": [
      "&lt;src/SensorModbusMaster.h&gt;",
      "_sensor_modbus_master_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The class for communicating with modbus devices.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Low level functions",
        "id": "low-level-functions",
        "description": "<p><a name=\"low_level_functions\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3d34ed3d6d1e33ea994d84ec3738ccbe",
              "include": null,
              "has_details": false,
              "type": "byte",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "responseBuffer",
              "brief": "The response buffer for incoming messages from the Modbus slave.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classmodbus_master.html",
              "id": "afbd5fc557e497e0b5eef5e4a7358c392",
              "include": null,
              "has_details": false,
              "type": "byte",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "commandBuffer",
              "brief": "The command buffer for outgoing messages to the Modbus slave.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abc8e373ca4ce4851e948157126fa4581",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getRegisters",
              "brief": "Get data from either holding or input registers and store it in the internal library buffer.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts the content of the registers into the internal library buffer, it does <em>not</em> return the data directly.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data. For a holding register readCommand = 0x03. For an input register readCommand = 0x04.",
                  "direction": ""
                },
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad2935f3e7bb1dba94cf73b756aa28bd7",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getHoldingRegisters",
              "brief": "Get data from a range of holding registers.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts the content of the registers into the internal library buffer, it does <em>not</em> return the data directly.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1a3f28efff79e18a826fc1c96e60c142",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getInputRegisters",
              "brief": "Get data from a range of input registers.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts the content of the registers into the internal library buffer, it does <em>not</em> return the data directly.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abdd427a5ec8e957e8b87fcb991ea3688",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCoils",
              "brief": "Get the data from a range of output coils and store it in the internal library buffer.",
              "description": "<p>Each coil is a single bit. The read command for output coils is 0x01.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts the content of the registers into the internal library buffer, it does <em>not</em> return the data directly.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of coil values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startCoil",
                  "type": "int16_t",
                  "type_name": "int16_t startCoil",
                  "default": null,
                  "description": "The starting coil number.",
                  "direction": ""
                },
                {
                  "name": "numCoils",
                  "type": "int16_t",
                  "type_name": "int16_t numCoils",
                  "default": null,
                  "description": "The number of coils to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a703c1b9ec5dcddd2034e372f834ecc34",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getDiscreteInputs",
              "brief": "Get a range of discrete inputs and store it in the internal library buffer.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts the content of the registers into the internal library buffer, it does <em>not</em> return the data directly.</p></aside><p>Each coil is a single bit. The read command for output coils is 0x01.</p>",
              "return_value": "True if the modbus slave returned the expected number of input values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startInput",
                  "type": "int16_t",
                  "type_name": "int16_t startInput",
                  "default": null,
                  "description": "The starting input number.",
                  "direction": ""
                },
                {
                  "name": "numInputs",
                  "type": "int16_t",
                  "type_name": "int16_t numInputs",
                  "default": null,
                  "description": "The number of discrete inputs to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a25c99f94d86695dbfb1bb11f92960212",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setRegisters",
              "brief": "Set the value of one or more holding registers using Modbus commands 0x06 or 0x10 (16).",
              "description": "<p>Input registers cannot be written by a Modbus controller/master</p><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 123 registers can be set at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of input values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to write.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte[]",
                  "type_name": "byte value[]",
                  "default": null,
                  "description": "A byte array with the values to write",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if a single register is being set. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abd2d65f5e55e689b365f102af04a1c10",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCoil",
              "brief": "Set the value of a single output coil using Modbus command 0x05.",
              "description": "<p>Output coils are single-bit values that can be either ON (1) or OFF (0). Input (discrete) contacts cannot be written by a Modbus controller/master.</p>",
              "return_value": "True if the proper modbus slave correctly responded to the command; false otherwise..",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "coilAddress",
                  "type": "int16_t",
                  "type_name": "int16_t coilAddress",
                  "default": null,
                  "description": "The address of the coil to set.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "bool",
                  "type_name": "bool value",
                  "default": null,
                  "description": "The value to set the coil to (true for ON, false for OFF).",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa299ac91f6b6b1c3e8e3c6f646710aca",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCoils",
              "brief": "Set the value of one or more output coils using modbus command 0x0F.",
              "description": "<p>Input (discrete) contacts cannot be written by a Modbus controller/master.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function always uses Modbus command 0x0F</p></aside>",
              "return_value": "True if the proper modbus slave correctly responded to the command; false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startCoil",
                  "type": "int16_t",
                  "type_name": "int16_t startCoil",
                  "default": null,
                  "description": "The address of the first coil to set.",
                  "direction": ""
                },
                {
                  "name": "numCoils",
                  "type": "int16_t",
                  "type_name": "int16_t numCoils",
                  "default": null,
                  "description": "The number of coils to set.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte[]",
                  "type_name": "byte value[]",
                  "default": null,
                  "description": "A pointer to a byte array containing the values to set the coils to.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8538ac5c8b36dec8b663d08507117cfa",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getModbusData",
              "brief": "A generic get data function that can be used for any data type or size.",
              "description": "<p>Use these commands:</p><ul><li>For a coil readCommand = 0x01</li><li>For a discrete input readCommand = 0x02</li><li>For a holding register readCommand = 0x03</li><li>For an input register readCommand = 0x04.</li></ul><p>A register command will return 2 bytes per register - the size should be number registers x 2.</p><p>A coil or discrete input command will return 1 bit per coil - the size should be number coils / 8.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>You could use this function for other uncommon modbus commands (ie, get diagnostics). To do so:</p><ul><li>set the readCommand parameter to the appropriate command code</li><li>set the startAddress to the first two bytes of the command (ie, sub-function High and sub-function Low)</li><li>set the numChunks to the next two bytes of the command (ie, Data High and Data Low)</li><li>set the expectedReturnBytes to the expected size of the response (highly variable)</li></ul></aside>",
              "return_value": "True if the proper modbus slave correctly responded to the command; false otherwise..",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data",
                  "direction": ""
                },
                {
                  "name": "startAddress",
                  "type": "int16_t",
                  "type_name": "int16_t startAddress",
                  "default": null,
                  "description": "The first address to read from",
                  "direction": ""
                },
                {
                  "name": "numChunks",
                  "type": "int16_t",
                  "type_name": "int16_t numChunks",
                  "default": null,
                  "description": "The number of chunks of data to read",
                  "direction": ""
                },
                {
                  "name": "expectedReturnBytes",
                  "type": "uint8_t",
                  "type_name": "uint8_t expectedReturnBytes",
                  "default": "0",
                  "description": "The expected return size in bytes- set to 0 to have the size calculated based on the command and the number of chunks requested.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "adca2e8b2f6c2928edfe9476cfc3c0edf",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "sendCommand",
              "brief": "Send a command to the modbus slave.",
              "description": "<p>This is the lowest level function.</p><p>This takes a command, adds the proper CRC, sends it to the sensor bus, and listens for a response.</p><p>If it receives a response from the correct slave with the correct CRC, it returns the number of bytes received and put into the responseBuffer.</p><p>If it receives a response from the wrong slave, an incorrect CRC, or an exception, it will print notice of the error to the debugging stream and return 0xn0FF where n is the error code.</p><p>If no response is received, this returns 0.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The maximum response size for a Modbus RTU frame is 256 bytes (125 registers plus overhead). If you get a return value of &gt;256, it means there was an error and you should parse the error code.</p></aside>",
              "return_value": "The number of bytes received from the Modbus slave.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "command",
                  "type": "byte[]",
                  "type_name": "byte command[]",
                  "default": null,
                  "description": "The fully formed command to send to the Modbus slave.",
                  "direction": ""
                },
                {
                  "name": "commandLength",
                  "type": "int",
                  "type_name": "int commandLength",
                  "default": null,
                  "description": "The length of the outgoing command.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a80c6bfb4f354336a9ba80eca7f1c112c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a514e1115d953dfb9a32f5bc276d325da",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a06f481ac45211b2569730350f2a4e481",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3be2e3d20db13fecb77d94c3aa97aeca",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_sensor_modbus_master_8h.html#a32bdb92774b67a64a50bbf538fa10f05\" class=\"m-doc\">modbusErrorCode</a>",
              "name": "getLastError",
              "brief": "Get last modbus error code.",
              "description": "",
              "return_value": "The last modbus error code",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a017edaf4b1a534c834c6a7571927bb2a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "printLastError",
              "brief": "Prints information about the last error to the debugging stream.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If there is not a debugging stream set, this function will have no effect.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Constructors and Begins",
        "id": "constructors-and-begins",
        "description": "<p><a name=\"ctor_and_begin\"></a></p><p>Functions to create the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object and set up the communication with the Arduino stream connected to the modbus device.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ff1c39df04889422c186b8f6a9f532f",
              "include": null,
              "has_details": false,
              "type": "",
              "name": "modbusMaster",
              "brief": "Default constructor.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a95d3ef2c72ad00a9fb83aa8166653d2a",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad40cf8ecc71295d2b813a2b680cb95aa",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a54d95e2e8a63113041cfcc4218193b23",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad4502b384cdf017a50627c341ef00c8e",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6b3303d324935325a6001d451fc34fce",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad08627e2076bdb007f0fd0a83683a7e2",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad9371e91e5fdb42ec86c89a175652565",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a91c60c34825d8cc1e5339bdcf41c48ed",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6a4ace31299aab2f7cdbe6a194b3d86a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5e0529a815cba8a7c2a8fd3a78504ece",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af4f5cfc6488139dacb6607765c96e7a9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "afcda287264e31ca3caf01bdb409f795d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Object setters and getters",
        "id": "object-setters-and-getters",
        "description": "<p><a name=\"setters_and_getters\"></a></p><p>Functions to set and get properties of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab4f91d0dbe0fb5162f03f43a733f0115",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSlaveID",
              "brief": "Set the slave id.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "slaveID",
                  "type": "byte",
                  "type_name": "byte slaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0cc119a18fa90364d69a3b363d53e0ab",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "getSlaveID",
              "brief": "Get the byte identifier of the modbus slave device.",
              "description": "",
              "return_value": "The byte identifier of the modbus slave device.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a653d069e4e558b4e30ffaa5018d2ab11",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setEnablePin",
              "brief": "Set the enable pin.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "The pin connected the the enable (direction control) of an RS485 to TTL adapter.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a763071044cfdb4177e82f6b2a36ed3ac",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getEnablePin",
              "brief": "Get the enable pin.",
              "description": "",
              "return_value": "The pin connected the the enable (direction control) of an RS485 to TTL adapter.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a13156eeb247d304bd245a78590061b59",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setCommandTimeout",
              "brief": "Set the timeout to wait for a response from a sensor after a modbus command.",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a66f7c59a25c8cca6d5b0991895c26b69\" class=\"m-doc\">MODBUS_<wbr />TIMEOUT</a> (500 milliseconds).</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeout",
                  "type": "uint32_t",
                  "type_name": "uint32_t timeout",
                  "default": null,
                  "description": "The timeout value in milliseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac9d76c5888d952d2d29ddd16e93a9c49",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getCommandTimeout",
              "brief": "Get the command timeout.",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a66f7c59a25c8cca6d5b0991895c26b69\" class=\"m-doc\">MODBUS_<wbr />TIMEOUT</a> (500 milliseconds).</p>",
              "return_value": "The command timeout value in milliseconds.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa2500d5c67c217ad5ec9b87232feacb6",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setFrameTimeout",
              "brief": "Set the frame timeout - the time to wait between characters within a frame (in ms)",
              "description": "<p>The modbus protocol defines that there can be no more than 1.5 characters of silence between characters in a frame and any space over 3.5 characters defines a new frame.</p><p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a4f4faaf6fc6fdad8c267e79a0472e929\" class=\"m-doc\">MODBUS_<wbr />FRAME_<wbr />TIMEOUT</a> (4 milliseconds).</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeout",
                  "type": "uint32_t",
                  "type_name": "uint32_t timeout",
                  "default": null,
                  "description": "The timeout value in milliseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a39b0ed8b20ecba4d5d01b739f17717db",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getFrameTimeout",
              "brief": "Get the frame timeout - the time to wait between characters within a frame (in ms)",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a4f4faaf6fc6fdad8c267e79a0472e929\" class=\"m-doc\">MODBUS_<wbr />FRAME_<wbr />TIMEOUT</a> (4 milliseconds).</p>",
              "return_value": "The frame timeout value in milliseconds.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a55f19b2ed82a9b83b1e1b65044a6185b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setCommandRetries",
              "brief": "Set the number of times to retry a command before giving up.",
              "description": "<p>By default, this is 10.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "retries",
                  "type": "uint8_t",
                  "type_name": "uint8_t retries",
                  "default": null,
                  "description": "The number of times to retry a command before giving up",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9d85d474a0b89f2f46685d612cefb7e0",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "name": "getCommandRetries",
              "brief": "Get the current number of times to retry a command before giving up.",
              "description": "<p>By default, this is 10.</p>",
              "return_value": "The number of times to retry a command before giving up",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abb659a72fab088cc1500cd63711d68df",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setStream",
              "brief": "Set the stream for communication.",
              "description": "<p>The &quot;stream&quot; device must be initialized prior to running this. Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "acbdbf5f2362cd3cf530863aeea5164d2",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setStream",
              "brief": "Set the stream for communication.",
              "description": "<p>Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a85feb7799b5032d2fba28f113af78df4",
              "include": null,
              "has_details": true,
              "type": "Stream*",
              "name": "getStream",
              "brief": "Get a pointer to the stream for communication.",
              "description": "",
              "return_value": "A pointer to the Arduino stream object used for communication.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      },
      {
        "name": "High level register fetching functions",
        "id": "high-level-register-fetching-functions",
        "description": "<p><a name=\"high_level_getters\"></a></p><p>These higher-level functions return a variety of data from a single or group of input or holding registers</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9352ee95f645212b7212b035e5b2976a",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromRegister",
              "brief": "Get the numbered input or holding register and return it as an uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aaaa8fdad59ab5121d159dca83495480f",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromRegister",
              "brief": "Get the numbered input or holding register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a96b041303ca4aeff22f0fe36026d39f8",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67d35c7228f753a5de55c98993c1ff07",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as an uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8dce4dc5a1c72366aaf0c9e7a6bab0b5",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1ee6683d3308d259be374d81b6b73f7d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromRegister",
              "brief": "Get four input or holding registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abfe27bbbf355cd77ca60e66663d9a0ab",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromRegister",
              "brief": "Get six input or holding registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a26322048e0075e1ba5c50e787fb2f27d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromRegister",
              "brief": "Get eight input or holding registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5bedea260aed6ac03d471ed36910908b",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromRegister",
              "brief": "Get the numbered input or holding register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a498752d08e8b140ae56f10691ba444b3",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromRegister",
              "brief": "Get the numbered input or holding register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a50549db752d088243354d32327907766",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromRegister",
              "brief": "Get the numbered input or holding register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ef9ecf1c87135fdcffa9b4669f58642",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9c50b1d03ca659d211d263ef8382681e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a457990c1949025bc7481a0bbd521a8d1",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromInputRegister",
              "brief": "Get the numbered input register and return it as an uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5d300ea5d6f467b97c2de0d28a2d8e71",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromInputRegister",
              "brief": "Get the numbered input register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a79e7363d79e3fa5c744c97aaa2e113dd",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab53d2d75a486a7ea19b07aeef4e67f17",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as an uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a62791e6bf276e971b93fd1a5de6e28f7",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "adb702543059764830c3ca5b9956a52b5",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromInputRegister",
              "brief": "Get four input registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae9e23046ca79c145f06f3af1d3dda374",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromInputRegister",
              "brief": "Get six input registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a186c9945777531733a5c222368c12191",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromInputRegister",
              "brief": "Get eight input registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a37d39af83fe9bcd094aebae6eec71489",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromInputRegister",
              "brief": "Get the numbered input register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af21bafb8e841afe58aec6a00a2768e38",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromInputRegister",
              "brief": "Get the numbered input register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a40702ffa1436a3feb9f6a9ded5932744",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromInputRegister",
              "brief": "Get the numbered input register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab05380d1878c60ca994255f564fe4d8b",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromInputRegister",
              "brief": "Get a group of input registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "add903deea90373c14624d83082b7cf53",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromInputRegister",
              "brief": "Get a group of input registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6b2fb762b17283c1432a126a5cc78977",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromHoldingRegister",
              "brief": "Get the numbered holding register and return it as an uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af4dbb66eaead8ac0f18ca482699d7dfe",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromHoldingRegister",
              "brief": "Get the numbered holding register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad6dfddffbe394a190a6195ab190edc54",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a027a1950108c22000fdd9a0138d358c4",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as an uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a7b083ebd79bb905b8d6bc888f827b906",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6755c8df34adddec0f99429c9967609c",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromHoldingRegister",
              "brief": "Get four holding registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad585ac992152dab46818d654f501eeec",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromHoldingRegister",
              "brief": "Get six holding registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac7abd24cb04582e214b9a26cea356f6a",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromHoldingRegister",
              "brief": "Get eight holding registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a7de6a87a4194bf83eac63f6e1db0330e",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromHoldingRegister",
              "brief": "Get the numbered holding register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae31ae07621e671d3ebfe9a056d3bf7b3",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromHoldingRegister",
              "brief": "Get the numbered holding register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae723b5a013fe0026bc452bb8af6b67a9",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromHoldingRegister",
              "brief": "Get the numbered holding register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a75e7aa1319a96bfd16cf6d4a657e98cf",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromHoldingRegister",
              "brief": "Get a group of holding registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4397bf86225414070d2e32c7a85260ce",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromHoldingRegister",
              "brief": "Get a group of holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "High level register setting functions",
        "id": "high-level-register-setting-functions",
        "description": "<p><a name=\"high_level_setters\"></a></p><p>These higher-level functions set data in input registers to a variety of data types</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2a9ae541429c5e577e7cde1d0f3c789c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint16ToRegister",
              "brief": "Set a holding register to a uint16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8fd747de47948ca5229033c2b0998407",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int16ToRegister",
              "brief": "Set a holding register to an int16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67111a916c90f50a3576115c303e7e10",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "float32ToRegister",
              "brief": "Set two holding registers to a 32-bit float.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a137ba6aec80c66e71d567dd47aabc919",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint32ToRegister",
              "brief": "Set two holding registers to an uint32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5cc60abf3de538a4a3af60550be1ebb3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int32ToRegister",
              "brief": "Set two holding registers to an int32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae4d6c2d9017e2b62cc65a8b5e6c0f0af",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64ToRegister",
              "brief": "Set four holding registers to a TAI64 (64-bit timestamp)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the four registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a81ce35d885af1e4eb3e3604537b757fb",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NToRegister",
              "brief": "Set six holding registers to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0219181c574417e74157bd656e821a78",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NAToRegister",
              "brief": "Set eight holding registers to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "add82453a7cbbb14d155a64c881bbed3e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "byteToRegister",
              "brief": "Set one byte of a holding register.",
              "description": "<p>The byte will be inserted as a full 16-bit register with the unused byte set to 0.</p>",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The value to set the byte to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab899177f026d1ae2426d123f65b25201",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "pointerToRegister",
              "brief": "Set a holding register to a 16-bit pointer.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3aaf99bf18dec165c5f7e8354eafda63",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "StringToRegister",
              "brief": "Set a series of holding registers to the characters in a String.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The String to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the String is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a37f5a2ce31e8184f85edaadd4830ef6d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "char[]",
                  "type_name": "char inChar[]",
                  "default": null,
                  "description": "The character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af7256527d4f410bef4b7430a0a200f03",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "const char*",
                  "type_name": "const char* inChar",
                  "default": null,
                  "description": "Pointer to a character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get registers in bulk and to get one or more coils or discrete",
        "id": "functions-to-get-registers-in-bulk-and-to-get-one-or-more-coils-or-discrete",
        "description": "<p><a name=\"bulk_getters\"></a> inputs.</p><p>These getter functions require a pointer to buffer to store the retrieved data.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a336e089416d89777ad259246b6131100",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getRegisters",
              "brief": "Get data from either holding or input registers and copy the output to the supplied buffer.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts only the <strong>content of the registers</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the buffer will be stripped of the modbus protocol characters.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data. For a holding register readCommand = 0x03. For an input register readCommand = 0x04.",
                  "direction": ""
                },
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "char*[]",
                  "type_name": "char* buff[]",
                  "default": null,
                  "description": "The buffer to copy the output data to.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0c226e0bda3ade8afc6b2df6d93b9fff",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getHoldingRegisters",
              "brief": "Get data from holding registers and copy the output to the supplied buffer.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts only the <strong>content of the registers</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the buffer will be stripped of the modbus protocol characters.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "char*[]",
                  "type_name": "char* buff[]",
                  "default": null,
                  "description": "The buffer to copy the output data to.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a086b271105ce47d8e673fbc41994a481",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getInputRegisters",
              "brief": "Get data from input registers and copy the output to the supplied buffer.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This command puts only the <strong>content of the registers</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the buffer will be stripped of the modbus protocol characters.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "char*[]",
                  "type_name": "char* buff[]",
                  "default": null,
                  "description": "The buffer to copy the output data to.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a34cde02ebf26a7a74f47dc9c588ddee6",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCoil",
              "brief": "Get the status of a single output coil.",
              "description": "<p>The read command for output coils is 0x01.</p>",
              "return_value": "The status of the coil (true for ON, false for OFF).",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "coilAddress",
                  "type": "int16_t",
                  "type_name": "int16_t coilAddress",
                  "default": null,
                  "description": "The address of the coil to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8bec668fd21b408533b1d740f508c596",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCoils",
              "brief": "Get the data from a range of output coils. Each coil is a single bit.",
              "description": "<p>The read command for output coils is 0x01.</p>",
              "return_value": "True if the modbus slave returned the expected number of coil values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startCoil",
                  "type": "int16_t",
                  "type_name": "int16_t startCoil",
                  "default": null,
                  "description": "The starting coil number.",
                  "direction": ""
                },
                {
                  "name": "numCoils",
                  "type": "int16_t",
                  "type_name": "int16_t numCoils",
                  "default": null,
                  "description": "The number of coils to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "byte*[]",
                  "type_name": "byte* buff[]",
                  "default": null,
                  "description": "A pre-allocated buffer to store the retrieved coil values.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af584be7d03a0ed90b0a8dc6df1239e84",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getDiscreteInput",
              "brief": "Get the status of a single discrete input.",
              "description": "",
              "return_value": "The status of the discrete input (true for ON, false for OFF).",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inputAddress",
                  "type": "int16_t",
                  "type_name": "int16_t inputAddress",
                  "default": null,
                  "description": "The address of the discrete input to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3ebc8acd06b977890a4da8d69ffc1109",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getDiscreteInputs",
              "brief": "Get a range of discrete inputs.",
              "description": "",
              "return_value": "True if the modbus slave returned the expected number of input values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startInput",
                  "type": "int16_t",
                  "type_name": "int16_t startInput",
                  "default": null,
                  "description": "The starting input number.",
                  "direction": ""
                },
                {
                  "name": "numInputs",
                  "type": "int16_t",
                  "type_name": "int16_t numInputs",
                  "default": null,
                  "description": "The number of discrete inputs to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "byte*[]",
                  "type_name": "byte* buff[]",
                  "default": null,
                  "description": "A pre-allocated buffer to store the retrieved coil values.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Mid-level data frame result fetching functions",
        "id": "mid-level-data-frame-result-fetching-functions",
        "description": "<p><a name=\"mid_level_getters\"></a></p><p>These mid-level functions return a variety of data from an input modbus &quot;frame.&quot; Currently, the only &quot;frame&quot; available is the response buffer. Using these functions will be helpful if you wish to decrease the serial traffic by sending one &quot;getRegisters&quot; request for many registers and then parse that result into many different results.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af04049af234571ba779f6d3e896b1687",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromFrame",
              "brief": "Read an uint16_t out of the response buffer frame.",
              "description": "",
              "return_value": "The uint16_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac6ee58399c17d50fc0d7e0b2ce6ea85a",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromFrame",
              "brief": "Read an int16_t out of the response buffer frame.",
              "description": "",
              "return_value": "The int16_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aaf912590306c521c2cc3ee3c0b85ebd2",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromFrame",
              "brief": "Read a 32-bit float out of the response buffer frame.",
              "description": "",
              "return_value": "The 32-bit float held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1469f5cfccddf91e53f7509df1414e87",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromFrame",
              "brief": "Read an uint32_t out of the response buffer frame.",
              "description": "",
              "return_value": "The uint32_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac2fc35bc6e59847ad6f3e8ff51debb4e",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromFrame",
              "brief": "Read an int32_t out of the response buffer frame.",
              "description": "",
              "return_value": "The int32_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af096c80dd88c0e5dd6b02d02d22447d8",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromFrame",
              "brief": "Read a TAI64 (64-bit timestamp) out of the response buffer frame and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a98300e0cde448d33b22f73b0b7af8cd7",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromFrame",
              "brief": "Read a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) out of the response buffer frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a47fbc6f6cd4554c779f6f2b3729f32f9",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromFrame",
              "brief": "Read a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count) out of the response buffer frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64NA in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3ee61f08d92b649511423efb059018c8",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromFrame",
              "brief": "Read a single byte out of the response buffer frame.",
              "description": "",
              "return_value": "The byte held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3b2553e8295a59f253eb76577cd1fa0b",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromFrame",
              "brief": "Read a 16-bit pointer out of the response buffer frame.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 16-bit pointer in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6a9d4831d02223fba49af5871f81d735",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromFrame",
              "brief": "Read a 16-bit pointer out of the response buffer frame.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the buffer frame. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 16-bit pointer in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae618c9adc1d3524e8dbf358fb80622b7",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromFrame",
              "brief": "Read a String out of the response buffer frame.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a28c2a9da100596ef7a143efc59351ed4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromFrame",
              "brief": "Read characters out of the response buffer frame and put them into a character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the response buffer.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Data frame setting functions",
        "id": "data-frame-setting-functions",
        "description": "<p><a name=\"mid_level_setters\"></a></p><p>These insert values into a longer modbus data frame. These are useful in creating a single long frame which can be sent out in one &quot;setRegisters&quot; command.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a82a2db8fe361893d2cfa8dc0984c4dcb",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint16ToFrame",
              "brief": "Insert an uint16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab3a48937344645e713e22ccab5413bf4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int16ToFrame",
              "brief": "Insert an int16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa4559fbeaf2e22e0e233d775c2317924",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "float32ToFrame",
              "brief": "Insert a 32-bit float into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 32-bit float. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad18620e1be6fda70793fc196cc4954c3",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint32ToFrame",
              "brief": "Insert an uint32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4ecf82e3343838b4482c8b6f9332592f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int32ToFrame",
              "brief": "Insert an int32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0c49815600ef7395b7e6c09b1a27c98f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64ToFrame",
              "brief": "Insert a TAI64 (64-bit timestamp) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a917a8be98664ece8dc038d239d177b8a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NToFrame",
              "brief": "Insert a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aab7f60c8a2fdfd8fff264cb45893649b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NAToFrame",
              "brief": "Insert a TAI64NA (64-bit timestamp followed by a 2-bit nanosecond count and then a 32-bit attosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4da77006888fdeed255ee5f8311f1609",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "byteToFrame",
              "brief": "Insert a single byte into the working byte frame.",
              "description": "<p>The byte will be inserted as a 16-bit value with the unused byte set to 0.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The byte to write",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2a0f67c89d361b5142c6a893043aa926",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "pointerToFrame",
              "brief": "Insert a 16-bit pointer into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value of the 16-bit pointer",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af98c5edab7a050a8f18c695281f5fb00",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "StringToFrame",
              "brief": "Insert a String into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The string to insert.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4b35b22de6c9b539e0f38f40e298daa1",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charToFrame",
              "brief": "Insert a character array into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inChar",
                  "type": "char[]",
                  "type_name": "char inChar[]",
                  "default": null,
                  "description": "The character array to insert.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to copy from in the array.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad8f83112546ecca942c4df165b3dc2d4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charToFrame",
              "brief": "Insert a character array into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inChar",
                  "type": "const char*",
                  "type_name": "const char* inChar",
                  "default": null,
                  "description": "A pointer to a character array to insert.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to copy from in the array.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "modbusMaster::<wbr />"
  }
}