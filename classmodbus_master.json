{
  "version": "1.11.0",
  "compound": {
    "kind": "class",
    "id": "classmodbus_master",
    "name": "modbusMaster",
    "url_base": "classmodbus_master",
    "url": "classmodbus_master.html",
    "include": [
      "&lt;src/SensorModbusMaster.h&gt;",
      "_sensor_modbus_master_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The class for communicating with modbus devices.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "modules": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Low level functions",
        "id": "low-level-functions",
        "description": "<p><a name=\"low_level_functions\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3d34ed3d6d1e33ea994d84ec3738ccbe",
              "include": null,
              "has_details": true,
              "type": "byte",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "responseBuffer",
              "brief": "The response buffer for incoming messages from the Modbus slave.",
              "description": "<p>This needs to be bigger than the largest response. For 8 parameters with 8 registers each: 64 registers * 2 bytes per register + 5 frame bytes</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abc8e373ca4ce4851e948157126fa4581",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getRegisters",
              "brief": "Get data from either holding or input registers.",
              "description": "",
              "return_value": "True if the modbus slave returned the expected number of register values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data. For a holding register readCommand = 0x03. For an input register readCommand = 0x04.",
                  "direction": ""
                },
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a25c99f94d86695dbfb1bb11f92960212",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setRegisters",
              "brief": "Set the value of one or more holding registers using Modbus commands 0x06 or 0x10 (16).",
              "description": "<p>Input registers cannot be written by a Modbus controller/master</p>",
              "return_value": "",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to write.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte[]",
                  "type_name": "byte value[]",
                  "default": null,
                  "description": "A byte array with the values to write",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if a single register is being set. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a87d658f24848b2f58142ba66f39815e9",
              "include": null,
              "has_details": true,
              "type": "int",
              "name": "sendCommand",
              "brief": "Send a command to the modbus slave.",
              "description": "<p>This is the lowest level function.</p><p>This takes a command, adds the proper CRC, sends it to the sensor bus, and listens for a response.</p><p>If it receives a response from the correct slave with the correct CRC, it returns the number of bytes received and put into the responseBuffer.</p><p>If it receives a response from the wrong slave, an incorrect CRC, or an exception, it will print notice of the error to the debugging stream and return 0.</p>",
              "return_value": "The number of bytes received from the Modbus slave.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "command",
                  "type": "byte[]",
                  "type_name": "byte command[]",
                  "default": null,
                  "description": "The fully formed command to send to the Modbus slave.",
                  "direction": ""
                },
                {
                  "name": "commandLength",
                  "type": "int",
                  "type_name": "int commandLength",
                  "default": null,
                  "description": "The length of the outgoing command.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a80c6bfb4f354336a9ba80eca7f1c112c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a514e1115d953dfb9a32f5bc276d325da",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a06f481ac45211b2569730350f2a4e481",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Constructors and Begins",
        "id": "constructors-and-begins",
        "description": "<p><a name=\"ctor_and_begin\"></a></p><p>Functions to create the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object and set up the communication with the Arduino stream connected to the modbus device.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aab2eb12266fc34b59bde0b963282f841",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "This function sets up the communication with the Arduino stream connected to the modbus device.",
              "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this. Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": "True if the starting communication was successful, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": "-1",
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3802863a060f76953c06763e9d2598a0",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "This function sets up the communication with the Arduino stream connected to the modbus device.",
              "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this. Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": "True if the starting communication was successful, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": "-1",
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "High level register fetching functions",
        "id": "high-level-register-fetching-functions",
        "description": "<p><a name=\"high_level_getters\"></a></p><p>These higher-level functions return a variety of data from a single or group of input or holding registers</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9352ee95f645212b7212b035e5b2976a",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromRegister",
              "brief": "Get the numbered input or holding register and return it as an uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aaaa8fdad59ab5121d159dca83495480f",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromRegister",
              "brief": "Get the numbered input or holding register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a96b041303ca4aeff22f0fe36026d39f8",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromRegister",
              "brief": "Get two input or holding registers starting at the specifiec number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67d35c7228f753a5de55c98993c1ff07",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromRegister",
              "brief": "Get two input or holding registers starting at the specifiec number and return them as an uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8dce4dc5a1c72366aaf0c9e7a6bab0b5",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromRegister",
              "brief": "Get two input or holding registers starting at the specifiec number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1ee6683d3308d259be374d81b6b73f7d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromRegister",
              "brief": "Get four input or holding registers starting at the specifiec number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abfe27bbbf355cd77ca60e66663d9a0ab",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromRegister",
              "brief": "Get six input or holding registers starting at the specifiec number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a26322048e0075e1ba5c50e787fb2f27d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromRegister",
              "brief": "Get eight input or holding registers starting at the specifiec number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5bedea260aed6ac03d471ed36910908b",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromRegister",
              "brief": "Get the numbered input or holding register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a498752d08e8b140ae56f10691ba444b3",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromRegister",
              "brief": "Get the numbered input or holding register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a50549db752d088243354d32327907766",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromRegister",
              "brief": "Get the numbered input or holding register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ef9ecf1c87135fdcffa9b4669f58642",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9c50b1d03ca659d211d263ef8382681e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read only) or 0x04 for an input register (read/write)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "High level register setting functions",
        "id": "high-level-register-setting-functions",
        "description": "<p><a name=\"high_level_setters\"></a></p><p>These higher-level functions set data in input registers to a variety of data types</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2a9ae541429c5e577e7cde1d0f3c789c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint16ToRegister",
              "brief": "Set a holding register to a uint16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8fd747de47948ca5229033c2b0998407",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int16ToRegister",
              "brief": "Set a holding register to an int16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67111a916c90f50a3576115c303e7e10",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "float32ToRegister",
              "brief": "Set two holding registers to a 32-bit float.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a137ba6aec80c66e71d567dd47aabc919",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint32ToRegister",
              "brief": "Set two holding registers to an uint32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5cc60abf3de538a4a3af60550be1ebb3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int32ToRegister",
              "brief": "Set two holding registers to an int32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae4d6c2d9017e2b62cc65a8b5e6c0f0af",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64ToRegister",
              "brief": "Set four holding registers to a TAI64 (64-bit timestamp)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the four registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a81ce35d885af1e4eb3e3604537b757fb",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NToRegister",
              "brief": "Set six holding registers to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0219181c574417e74157bd656e821a78",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NAToRegister",
              "brief": "Set eight holding registers to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "add82453a7cbbb14d155a64c881bbed3e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "byteToRegister",
              "brief": "Set one byte of a holding register.",
              "description": "<p>The byte will be inserted as a full 16-bit register with the unused byte set to 0.</p>",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The value to set the byte to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab899177f026d1ae2426d123f65b25201",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "pointerToRegister",
              "brief": "Set a holding register to a 16-bit pointer.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3aaf99bf18dec165c5f7e8354eafda63",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "StringToRegister",
              "brief": "Set a series of holding registers to the characters in a String.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The String to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the String is two charactes or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a37f5a2ce31e8184f85edaadd4830ef6d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "char[]",
                  "type_name": "char inChar[]",
                  "default": null,
                  "description": "The character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two charactes or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Mid-level data frame result fetching functions",
        "id": "mid-level-data-frame-result-fetching-functions",
        "description": "<p><a name=\"mid_level_getters\"></a></p><p>These mid-level functions return a variety of data from an input modbus &quot;frame.&quot; Currently, the only &quot;frame&quot; available is the response buffer. Using these functions will be helpful if you wish to decrease the serial traffic by sending one &quot;getRegisters&quot; request for many registers and then parse that result into many different results.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af04049af234571ba779f6d3e896b1687",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromFrame",
              "brief": "Read an uint16_t out of the response buffer frame.",
              "description": "",
              "return_value": "The uint16_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac6ee58399c17d50fc0d7e0b2ce6ea85a",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromFrame",
              "brief": "Read an int16_t out of the response buffer frame.",
              "description": "",
              "return_value": "The int16_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aaf912590306c521c2cc3ee3c0b85ebd2",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromFrame",
              "brief": "Read a 32-bit float out of the response buffer frame.",
              "description": "",
              "return_value": "The 32-bit float held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1469f5cfccddf91e53f7509df1414e87",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromFrame",
              "brief": "Read an uint32_t out of the response buffer frame.",
              "description": "",
              "return_value": "The uint32_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac2fc35bc6e59847ad6f3e8ff51debb4e",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromFrame",
              "brief": "Read an int32_t out of the response buffer frame.",
              "description": "",
              "return_value": "The int32_t held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af096c80dd88c0e5dd6b02d02d22447d8",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromFrame",
              "brief": "Read a TAI64 (64-bit timestamp) out of the response buffer frame and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a98300e0cde448d33b22f73b0b7af8cd7",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromFrame",
              "brief": "Read a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) out of the response buffer frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a47fbc6f6cd4554c779f6f2b3729f32f9",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromFrame",
              "brief": "Read a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count) out of the response buffer frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64NA in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3ee61f08d92b649511423efb059018c8",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromFrame",
              "brief": "Read a single byte out of the response buffer frame.",
              "description": "",
              "return_value": "The byte held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3b2553e8295a59f253eb76577cd1fa0b",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromFrame",
              "brief": "Read a 16-bit pointer out of the response buffer frame.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the buffer frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 16-bit pointer in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6a9d4831d02223fba49af5871f81d735",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromFrame",
              "brief": "Read a 16-bit pointer out of the response buffer frame.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the buffer frame. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 16-bit pointer in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae618c9adc1d3524e8dbf358fb80622b7",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromFrame",
              "brief": "Read a String out of the response buffer frame.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a28c2a9da100596ef7a143efc59351ed4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromFrame",
              "brief": "Read characters out of the response buffer frame and put them into a character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "outChar",
                  "type": "char[]",
                  "type_name": "char outChar[]",
                  "default": null,
                  "description": "A character array to fill with the content of the response buffer.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Data frame setting functions",
        "id": "data-frame-setting-functions",
        "description": "<p><a name=\"mid_level_setters\"></a></p><p>These insert values into a longer modbus data frame. These are useful in creating a single long frame which can be sent out in one &quot;setRegisters&quot; command.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a82a2db8fe361893d2cfa8dc0984c4dcb",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint16ToFrame",
              "brief": "Insert an uint16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab3a48937344645e713e22ccab5413bf4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int16ToFrame",
              "brief": "Insert an int16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa4559fbeaf2e22e0e233d775c2317924",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "float32ToFrame",
              "brief": "Insert a 32-bit float into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 32-bit float. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad18620e1be6fda70793fc196cc4954c3",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint32ToFrame",
              "brief": "Insert an uint32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4ecf82e3343838b4482c8b6f9332592f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int32ToFrame",
              "brief": "Insert an int32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0c49815600ef7395b7e6c09b1a27c98f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64ToFrame",
              "brief": "Insert a TAI64 (64-bit timestamp) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a917a8be98664ece8dc038d239d177b8a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NToFrame",
              "brief": "Insert a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aab7f60c8a2fdfd8fff264cb45893649b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NAToFrame",
              "brief": "Insert a TAI64NA (64-bit timestamp followed by a 2-bit nanosecond count and then a 32-bit attosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4da77006888fdeed255ee5f8311f1609",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "byteToFrame",
              "brief": "Insert a single byte into the working byte frame.",
              "description": "<p>The byte will be inserted as a 16-bit value with the unused byte set to 0.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The byte to write",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2a0f67c89d361b5142c6a893043aa926",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "pointerToFrame",
              "brief": "Insert a 16-bit pointer into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value of the 16-bit pointer",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af98c5edab7a050a8f18c695281f5fb00",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "StringToFrame",
              "brief": "Insert a String into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The string to insert.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4b35b22de6c9b539e0f38f40e298daa1",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charToFrame",
              "brief": "Insert a character array into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inChar",
                  "type": "char[]",
                  "type_name": "char inChar[]",
                  "default": null,
                  "description": "The character array to insert.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to copy from in the array.",
                  "direction": ""
                },
                {
                  "name": "modbusFrame",
                  "type": "byte[]",
                  "type_name": "byte modbusFrame[]",
                  "default": null,
                  "description": "The working byte frame",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "modbusMaster::<wbr />"
  }
}