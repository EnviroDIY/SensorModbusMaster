{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "classmodbus_master",
    "name": "modbusMaster",
    "url_base": "classmodbus_master",
    "url": "classmodbus_master.html",
    "include": [
      "&lt;src/SensorModbusMaster.h&gt;",
      "_sensor_modbus_master_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The class for communicating with modbus devices.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Internal Buffers",
        "id": "internal-buffers",
        "description": "<p><a name=\"internal_buffers\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3d34ed3d6d1e33ea994d84ec3738ccbe",
              "include": null,
              "has_details": false,
              "type": "byte",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "responseBuffer",
              "brief": "The response buffer for incoming messages from the Modbus slave.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classmodbus_master.html",
              "id": "afbd5fc557e497e0b5eef5e4a7358c392",
              "include": null,
              "has_details": false,
              "type": "byte",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "commandBuffer",
              "brief": "The command buffer for outgoing messages to the Modbus slave.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Constructors and Begins",
        "id": "constructors-and-begins",
        "description": "<p><a name=\"ctor_and_begin\"></a></p><p>Functions to create the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object and set up the communication with the Arduino stream connected to the modbus device.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ff1c39df04889422c186b8f6a9f532f",
              "include": null,
              "has_details": false,
              "type": "",
              "name": "modbusMaster",
              "brief": "Default constructor.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a95d3ef2c72ad00a9fb83aa8166653d2a",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad40cf8ecc71295d2b813a2b680cb95aa",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a54d95e2e8a63113041cfcc4218193b23",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad4502b384cdf017a50627c341ef00c8e",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6b3303d324935325a6001d451fc34fce",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad08627e2076bdb007f0fd0a83683a7e2",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad9371e91e5fdb42ec86c89a175652565",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a91c60c34825d8cc1e5339bdcf41c48ed",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "modbusMaster",
              "brief": "Construct a new modbus Master object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8c8fcd001268a69f23af1677d3b3e78f",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa8a2b7fd3df1df2243671057e4d24d0c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a76b97830268913c2465b05ca5f11ea9f",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa5910a4bb372f340f21b9c3bfe1d7c77",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6a4ace31299aab2f7cdbe6a194b3d86a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5e0529a815cba8a7c2a8fd3a78504ece",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af4f5cfc6488139dacb6607765c96e7a9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "afcda287264e31ca3caf01bdb409f795d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "begin",
              "brief": "Equivalent to a constructor - used to assign members of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.",
              "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>If you set the members using a constructor or the setter functions, you do not need to run this function.</p></aside><aside class=\"m-note m-warning\"><h4>Attention</h4><p>This does <strong>not</strong> initialize the stream or set the baud rate - that must be done separately before attempting to communicate.</p></aside>",
              "return_value": "Always returns true",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modbusSlaveID",
                  "type": "byte",
                  "type_name": "byte modbusSlaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                },
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A pointer or reference to the Arduino stream object to communicate with.",
                  "direction": ""
                },
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Object setters and getters",
        "id": "object-setters-and-getters",
        "description": "<p><a name=\"setters_and_getters\"></a></p><p>Functions to set and get properties of the <a href=\"classmodbus_master.html\" class=\"m-doc\">modbusMaster</a> object.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab4f91d0dbe0fb5162f03f43a733f0115",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSlaveID",
              "brief": "Set the slave id.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "slaveID",
                  "type": "byte",
                  "type_name": "byte slaveID",
                  "default": null,
                  "description": "The byte identifier of the modbus slave device.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0cc119a18fa90364d69a3b363d53e0ab",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "getSlaveID",
              "brief": "Get the byte identifier of the modbus slave device.",
              "description": "",
              "return_value": "The byte identifier of the modbus slave device.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a653d069e4e558b4e30ffaa5018d2ab11",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setEnablePin",
              "brief": "Set the enable pin.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "enablePin",
                  "type": "int8_t",
                  "type_name": "int8_t enablePin",
                  "default": null,
                  "description": "The pin connected the the enable (direction control) of an RS485 to TTL adapter.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a763071044cfdb4177e82f6b2a36ed3ac",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getEnablePin",
              "brief": "Get the enable pin.",
              "description": "",
              "return_value": "The pin connected the the enable (direction control) of an RS485 to TTL adapter.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a13156eeb247d304bd245a78590061b59",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setCommandTimeout",
              "brief": "Set the timeout to wait for a response from a sensor after a modbus command.",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a66f7c59a25c8cca6d5b0991895c26b69\" class=\"m-doc\">MODBUS_<wbr />TIMEOUT</a> (500 milliseconds).</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeout",
                  "type": "uint32_t",
                  "type_name": "uint32_t timeout",
                  "default": null,
                  "description": "The timeout value in milliseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac9d76c5888d952d2d29ddd16e93a9c49",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getCommandTimeout",
              "brief": "Get the command timeout.",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a66f7c59a25c8cca6d5b0991895c26b69\" class=\"m-doc\">MODBUS_<wbr />TIMEOUT</a> (500 milliseconds).</p>",
              "return_value": "The command timeout value in milliseconds.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa2500d5c67c217ad5ec9b87232feacb6",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setFrameTimeout",
              "brief": "Set the frame timeout - the time to wait between characters within a frame (in ms)",
              "description": "<p>The modbus protocol defines that there can be no more than 1.5 characters of silence between characters in a frame and any space over 3.5 characters defines a new frame.</p><p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a4f4faaf6fc6fdad8c267e79a0472e929\" class=\"m-doc\">MODBUS_<wbr />FRAME_<wbr />TIMEOUT</a> (4 milliseconds).</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeout",
                  "type": "uint32_t",
                  "type_name": "uint32_t timeout",
                  "default": null,
                  "description": "The timeout value in milliseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a39b0ed8b20ecba4d5d01b739f17717db",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getFrameTimeout",
              "brief": "Get the frame timeout - the time to wait between characters within a frame (in ms)",
              "description": "<p>By default, this is <a href=\"_sensor_modbus_master_8h.html#a4f4faaf6fc6fdad8c267e79a0472e929\" class=\"m-doc\">MODBUS_<wbr />FRAME_<wbr />TIMEOUT</a> (4 milliseconds).</p>",
              "return_value": "The frame timeout value in milliseconds.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a55f19b2ed82a9b83b1e1b65044a6185b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setCommandRetries",
              "brief": "Set the number of times to retry a command before giving up.",
              "description": "<p>By default, this is 10.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "retries",
                  "type": "uint8_t",
                  "type_name": "uint8_t retries",
                  "default": null,
                  "description": "The number of times to retry a command before giving up",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9d85d474a0b89f2f46685d612cefb7e0",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "name": "getCommandRetries",
              "brief": "Get the current number of times to retry a command before giving up.",
              "description": "<p>By default, this is 10.</p>",
              "return_value": "The number of times to retry a command before giving up",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abb659a72fab088cc1500cd63711d68df",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setStream",
              "brief": "Set the stream for communication.",
              "description": "<p>The &quot;stream&quot; device must be initialized prior to running this. Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "A pointer to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "acbdbf5f2362cd3cf530863aeea5164d2",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setStream",
              "brief": "Set the stream for communication.",
              "description": "<p>Per modbus specifications, the stream must have:</p><ul><li>1 start bit</li><li>8 data bits, least significant bit sent first</li><li>1 stop bit if parity is used - 2 bits if no parity Note that neither SoftwareSerial, AltSoftSerial, nor NeoSoftwareSerial will support either even or odd parity!</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "A reference to the Arduino stream object to communicate with.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a85feb7799b5032d2fba28f113af78df4",
              "include": null,
              "has_details": true,
              "type": "Stream*",
              "name": "getStream",
              "brief": "Get a pointer to the stream for communication.",
              "description": "",
              "return_value": "A pointer to the Arduino stream object used for communication.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set unsigned 16-bit integer (uint16_t) data",
        "id": "functions-to-get-and-set-unsigned-16-bit-integer-uint16_t-data",
        "description": "<p><a name=\"uint16_t_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a457990c1949025bc7481a0bbd521a8d1",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromInputRegister",
              "brief": "Get the numbered input register and return it as a uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6b2fb762b17283c1432a126a5cc78977",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromHoldingRegister",
              "brief": "Get the numbered holding register and return it as a uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9352ee95f645212b7212b035e5b2976a",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromRegister",
              "brief": "Get the numbered input or holding register and return it as a uint16_t.",
              "description": "",
              "return_value": "The uint16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2a9ae541429c5e577e7cde1d0f3c789c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint16ToRegister",
              "brief": "Set a holding register to a uint16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4e03d0c68428eb409eb572e880261954",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint16ToHoldingRegister",
              "brief": "Set a holding register to a uint16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aac807491938060a73891876be3676f7a",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "uint16FromFrame",
              "brief": "Read a uint16_t out of a modbus response frame.",
              "description": "",
              "return_value": "The uint16_t starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a13f41dc06e40447b7000c6259810c992",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint16ToFrame",
              "brief": "Insert a uint16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set signed 16-bit integer (int16_t) data",
        "id": "functions-to-get-and-set-signed-16-bit-integer-int16_t-data",
        "description": "<p><a name=\"int16_t_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5d300ea5d6f467b97c2de0d28a2d8e71",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromInputRegister",
              "brief": "Get the numbered input register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af4dbb66eaead8ac0f18ca482699d7dfe",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromHoldingRegister",
              "brief": "Get the numbered holding register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aaaa8fdad59ab5121d159dca83495480f",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromRegister",
              "brief": "Get the numbered input or holding register and return it as an int16_t.",
              "description": "",
              "return_value": "The int16_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8fd747de47948ca5229033c2b0998407",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int16ToRegister",
              "brief": "Set a holding register to an int16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a84f436a0c76a12dcc3f78fc189bc13ed",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int16ToHoldingRegister",
              "brief": "Set a holding register to an int16_t.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af80d7bf976a21eed570bb5af727effe9",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "int16FromFrame",
              "brief": "Read an int16_t out of a modbus response frame.",
              "description": "",
              "return_value": "The int16_t starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int16_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aeed2d60573f2d66533b6e6e12435f0a6",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int16ToFrame",
              "brief": "Insert an int16_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int16_t. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int16_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set 32-bit float data",
        "id": "functions-to-get-and-set-32-bit-float-data",
        "description": "<p><a name=\"float_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a79e7363d79e3fa5c744c97aaa2e113dd",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad6dfddffbe394a190a6195ab190edc54",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a96b041303ca4aeff22f0fe36026d39f8",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as a 32-bit float.",
              "description": "",
              "return_value": "The 32 bit float held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67111a916c90f50a3576115c303e7e10",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "float32ToRegister",
              "brief": "Set two holding registers to a 32-bit float.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a314a8888f0bc82dbb7b2340048c57ba5",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "float32ToHoldingRegister",
              "brief": "Set two holding registers to a 32-bit float.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1f48ec87cc14b233afb7b806c7edf684",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "float32FromFrame",
              "brief": "Read a 32-bit float out of a modbus response frame.",
              "description": "",
              "return_value": "The 32-bit float starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 32-bit float in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0859ff4a69cc44b5e0f8fd8668c2e4d6",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "float32ToFrame",
              "brief": "Insert a 32-bit float into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 32-bit float. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the 32-bit float in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set unsigned 32-bit integer (uint32_t) data",
        "id": "functions-to-get-and-set-unsigned-32-bit-integer-uint32_t-data",
        "description": "<p><a name=\"uint32_t_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab53d2d75a486a7ea19b07aeef4e67f17",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as a uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a027a1950108c22000fdd9a0138d358c4",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as a uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a67d35c7228f753a5de55c98993c1ff07",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as a uint32_t.",
              "description": "",
              "return_value": "The uint32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a137ba6aec80c66e71d567dd47aabc919",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint32ToRegister",
              "brief": "Set two holding registers to a uint32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab778dbf88339b8c08ff4241c09669994",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "uint32ToHoldingRegister",
              "brief": "Set two holding registers to a uint32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac2af1b7160d5d6df7fea5934ae23a3af",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "uint32ToFrame",
              "brief": "Insert a uint32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint32_t",
                  "type_name": "uint32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the uint32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a36fddfeec764c9a7483261967f5770dc",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "uint32FromFrame",
              "brief": "Read a uint32_t out of a modbus response frame.",
              "description": "",
              "return_value": "The uint32_t starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the uint32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the uint32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set signed 32-bit integer (int32_t) data",
        "id": "functions-to-get-and-set-signed-32-bit-integer-int32_t-data",
        "description": "<p><a name=\"int32_t_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a62791e6bf276e971b93fd1a5de6e28f7",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromInputRegister",
              "brief": "Get two input registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a7b083ebd79bb905b8d6bc888f827b906",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromHoldingRegister",
              "brief": "Get two holding registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8dce4dc5a1c72366aaf0c9e7a6bab0b5",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromRegister",
              "brief": "Get two input or holding registers starting at the specified number and return them as an int32_t.",
              "description": "",
              "return_value": "The int32_t held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5cc60abf3de538a4a3af60550be1ebb3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int32ToRegister",
              "brief": "Set two holding registers to an int32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a33cf719bfa8a81d36e11c8ccff92c77e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "int32ToHoldingRegister",
              "brief": "Set two holding registers to an int32_t.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the two registers of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a7b89cb8143ea645955d266e9ca3a5666",
              "include": null,
              "has_details": true,
              "type": "int32_t",
              "name": "int32FromFrame",
              "brief": "Read an int32_t out of a modbus response frame.",
              "description": "",
              "return_value": "The int32_t starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the int32_t in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6ee4164331c9fc3dae60f739bb821111",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "int32ToFrame",
              "brief": "Insert an int32_t into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int32_t",
                  "type_name": "int32_t value",
                  "default": null,
                  "description": "The value to add to the frame.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the int32_t. Optional with a default of big endian, which is required by modbus specifications. Only big and little endian are supported. Mixed endianness is <em>NOT</em> supported.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the int32_t in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set bytes (half registers)",
        "id": "functions-to-get-and-set-bytes-half-registers",
        "description": "<p><a name=\"byte_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a37d39af83fe9bcd094aebae6eec71489",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromInputRegister",
              "brief": "Get the numbered input register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a7de6a87a4194bf83eac63f6e1db0330e",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromHoldingRegister",
              "brief": "Get the numbered holding register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5bedea260aed6ac03d471ed36910908b",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromRegister",
              "brief": "Get the numbered input or holding register and return one byte of it.",
              "description": "",
              "return_value": "The byte held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to return (1 for upper or 2 for lower)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "add82453a7cbbb14d155a64c881bbed3e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "byteToRegister",
              "brief": "Set one byte of a holding register.",
              "description": "<p>The byte will be inserted as a full 16-bit register with the unused byte set to 0.</p>",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The value to set the byte to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a66493ee1e05b5637cd006927a28f28f5",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "byteToHoldingRegister",
              "brief": "Set one byte of a holding register.",
              "description": "<p>The byte will be inserted as a full 16-bit register with the unused byte set to 0.</p>",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "byteNum",
                  "type": "int",
                  "type_name": "int byteNum",
                  "default": null,
                  "description": "The byte number to set (1 for upper or 2 for lower)",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The value to set the byte to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a110b56a6f77c12390447d50239290613",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "byteFromFrame",
              "brief": "Read a single byte out of a modbus response frame.",
              "description": "",
              "return_value": "The byte starting at the given byte index in the modbus frame.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0d940d9b5bd885e467d00d1a8744a1bd",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "byteToFrame",
              "brief": "Insert a single byte into the working byte frame.",
              "description": "<p>The byte will be inserted as a 16-bit value with the unused byte set to 0.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "byte",
                  "type_name": "byte value",
                  "default": null,
                  "description": "The byte to write",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set 64-bit timestamp (TAI64) data",
        "id": "functions-to-get-and-set-64-bit-timestamp-tai64-data",
        "description": "<p><a name=\"tai64_functions\"></a></p><p>Common parameters for TAI64 reading functions:</p><ul><li><code>nanoseconds</code> - A reference to another uint32_t to populate with the nanoseconds - for TAI64N and TAI64NA</li><li><code>attoseconds</code> - A reference to another uint32_t to populate with the attoseconds - for TAI64NA</li><li><code>return</code> - The lower 32 bits of the TAI64 timestamp.</li></ul><p>Common parameters for TAI64 writing functions:</p><ul><li><code>seconds</code> - The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.</li><li><code>nanoseconds</code> - The 32-bit nanosecond count.</li><li><code>attoseconds</code> - The 32-bit attoseconds count.</li></ul>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "adb702543059764830c3ca5b9956a52b5",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromInputRegister",
              "brief": "Get four input registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6755c8df34adddec0f99429c9967609c",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromHoldingRegister",
              "brief": "Get four holding registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a1ee6683d3308d259be374d81b6b73f7d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromRegister",
              "brief": "Get four input or holding registers starting at the specified number, convert them to a TAI64 (64-bit timestamp), and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the four registers of interest.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae9e23046ca79c145f06f3af1d3dda374",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromInputRegister",
              "brief": "Get six input registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad585ac992152dab46818d654f501eeec",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromHoldingRegister",
              "brief": "Get six holding registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abfe27bbbf355cd77ca60e66663d9a0ab",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromRegister",
              "brief": "Get six input or holding registers starting at the specified number, convert them to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a186c9945777531733a5c222368c12191",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromInputRegister",
              "brief": "Get eight input registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ac7abd24cb04582e214b9a26cea356f6a",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromHoldingRegister",
              "brief": "Get eight holding registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a26322048e0075e1ba5c50e787fb2f27d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromRegister",
              "brief": "Get eight input or holding registers starting at the specified number, convert them to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count), and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae4d6c2d9017e2b62cc65a8b5e6c0f0af",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64ToRegister",
              "brief": "Set four holding registers to a TAI64 (64-bit timestamp)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the four registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a121553622a2f6ca65dc56c78402e238b",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64ToHoldingRegister",
              "brief": "Set four holding registers to a TAI64 (64-bit timestamp)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the four registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a81ce35d885af1e4eb3e3604537b757fb",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NToRegister",
              "brief": "Set six holding registers to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a97b764a7eda673a99014de72d280f5a4",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NToHoldingRegister",
              "brief": "Set six holding registers to a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the six registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0219181c574417e74157bd656e821a78",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NAToRegister",
              "brief": "Set eight holding registers to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "adf005398b31c8731a5031ff52803c79f",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "TAI64NAToHoldingRegister",
              "brief": "Set eight holding registers to a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count)",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of first of the eight registers of interest.",
                  "direction": ""
                },
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aa44c467c6c6a072227843b4e0be08749",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64FromFrame",
              "brief": "Read a TAI64 (64-bit timestamp) out of a modbus response frame and return the lower 32-bits as a unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a686cc0c3d0639d009905d4ee317d3845",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NFromFrame",
              "brief": "Read a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) out of a modbus response frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a61c32aa03b4db227289b8012be9ece0c",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "TAI64NAFromFrame",
              "brief": "Read a TAI64NA (64-bit timestamp followed by a 32-bit nanosecond count and then a 32-bit attosecond count) out of a modbus response frame and return an equivalent 32-bits unix timestamp.",
              "description": "",
              "return_value": "The equivalent 32-bit unix timestamp.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "nanoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; nanoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the nanoseconds.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t&amp;",
                  "type_name": "uint32_t&amp; attoseconds",
                  "default": null,
                  "description": "A reference to another uint32_t to populate with the attoseconds.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the TAI64NA in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a9e44059b965fdc74665bc9314496eb35",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64ToFrame",
              "brief": "Insert a TAI64 (64-bit timestamp) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64 in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a441ebec82fb4e37c8b9a398a6a1e4633",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NToFrame",
              "brief": "Insert a TAI64N (64-bit timestamp followed by a 32-bit nanosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abc58039df0a37a1eec1635a1efae91ae",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "TAI64NAToFrame",
              "brief": "Insert a TAI64NA (64-bit timestamp followed by a 2-bit nanosecond count and then a 32-bit attosecond count) into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "seconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t seconds",
                  "default": null,
                  "description": "The lower 32-bits of the timestamp. The upper 32-bits will always be set to 0x40000000, which will be the correct value until the year 2106.",
                  "direction": ""
                },
                {
                  "name": "nanoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t nanoseconds",
                  "default": null,
                  "description": "The 32-bit nanosecond count.",
                  "direction": ""
                },
                {
                  "name": "attoseconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t attoseconds",
                  "default": null,
                  "description": "The 32-bit attoseconds count.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the TAI64N in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set pointers to other registers",
        "id": "functions-to-get-and-set-pointers-to-other-registers",
        "description": "<p><a name=\"pointer_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af21bafb8e841afe58aec6a00a2768e38",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromInputRegister",
              "brief": "Get the numbered input register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae31ae07621e671d3ebfe9a056d3bf7b3",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromHoldingRegister",
              "brief": "Get the numbered holding register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a498752d08e8b140ae56f10691ba444b3",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromRegister",
              "brief": "Get the numbered input or holding register and return it as an 16-bit pointer.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer held in the register.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a40702ffa1436a3feb9f6a9ded5932744",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromInputRegister",
              "brief": "Get the numbered input register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae723b5a013fe0026bc452bb8af6b67a9",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromHoldingRegister",
              "brief": "Get the numbered holding register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a50549db752d088243354d32327907766",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromRegister",
              "brief": "Get the numbered input or holding register and return it as a 8-bit pointer type.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the register. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab899177f026d1ae2426d123f65b25201",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "pointerToRegister",
              "brief": "Set a holding register to a 16-bit pointer.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aefd1e7c771c07395525a3448b25cba72",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "pointerToHoldingRegister",
              "brief": "Set a holding register to a 16-bit pointer.",
              "description": "",
              "return_value": "True if the register was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The register number of interest.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value to set the register to.",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a22a55adb621f56be6d4a013c3b608e59",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "pointerFromFrame",
              "brief": "Read a 16-bit pointer out of a modbus response frame.",
              "description": "<p>This should be a pointer to another registry address within the modbus registers.</p>",
              "return_value": "The 16-bit pointer starting at the given byte index in the register array.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the 16-bit pointer in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 16-bit pointer in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae3c909b39a10d1d89c27afd64b67dc22",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "pointerTypeFromFrame",
              "brief": "Read a 8-bit pointer type out of a modbus response frame.",
              "description": "<p>This should be the type of register pointed to by pointer contained within a different modbus register.</p>",
              "return_value": "The 8-bit pointer type held in the buffer frame. This will be an object of type <a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467aeafb28f96cadcbba103b51c2a667ad723b\" class=\"m-doc\">bigEndian</a>",
                  "description": "The endianness of the pointer type in the modbus register. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the 8-bit pointer type in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a94d915acc603bf02432cb81b89e99ca5",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "pointerToFrame",
              "brief": "Insert a 16-bit pointer into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "uint16_t",
                  "type_name": "uint16_t value",
                  "default": null,
                  "description": "The value of the 16-bit pointer",
                  "direction": ""
                },
                {
                  "name": "point",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a> point",
                  "default": null,
                  "description": "The type of the pointer, (<a href=\"_sensor_modbus_master_8h.html#a9b9360aa533153d15b6355695898bef1\" class=\"m-doc\">pointerType</a>) ie, which section of the modbus memory is being pointed to.",
                  "direction": ""
                },
                {
                  "name": "endian",
                  "type": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a>",
                  "type_name": "<a href=\"_sensor_modbus_master_8h.html#a8ba83d09160bd55999b0630dccc467ae\" class=\"m-doc\">endianness</a> endian",
                  "default": null,
                  "description": "The endianness used to write the 16-bit pointer. Optional with a default of big endian, which is required by modbus specifications.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set Strings",
        "id": "functions-to-get-and-set-strings",
        "description": "<p><a name=\"String_functions\"></a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>These are for Arduino String objects, not simple character arrays.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ab05380d1878c60ca994255f564fe4d8b",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromInputRegister",
              "brief": "Get a group of input registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a75e7aa1319a96bfd16cf6d4a657e98cf",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromHoldingRegister",
              "brief": "Get a group of holding registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ef9ecf1c87135fdcffa9b4669f58642",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters, combine them, and return a single String.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3aaf99bf18dec165c5f7e8354eafda63",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "StringToRegister",
              "brief": "Set a series of holding registers to the characters in a String.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The String to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the String is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad43c5db7ed2b76799ab95dd7c0ddac48",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "StringToHoldingRegister",
              "brief": "Set a series of holding registers to the characters in a String.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The String to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the String is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a07fc3db53feb5028e65bc2c0491b2962",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "StringFromFrame",
              "brief": "Read a String out of a modbus response frame.",
              "description": "",
              "return_value": "The text from the registers.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a8ea56830201efc1be778ca69042c8632",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "StringToFrame",
              "brief": "Insert a String into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "type_name": "String value",
                  "default": null,
                  "description": "The string to insert.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get and set character arrays",
        "id": "functions-to-get-and-set-character-arrays",
        "description": "<p><a name=\"character_array_functions\"></a></p><aside class=\"m-note m-info\"><h4>Note</h4><p>These are for simple character arrays, not Arduino String objects.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a849579ae1de4278d111dc7ca24e547e4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromInputRegister",
              "brief": "Get a group of input registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char*",
                  "type_name": "char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a0ddc17306caa7d6f3c7c38d0b6bbaa38",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromHoldingRegister",
              "brief": "Get a group of holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char*",
                  "type_name": "char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4406ae28783218c522fa8bc429a4084b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "char*",
                  "type_name": "char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af3edeff95269977f26e3d77e9c3ca1b1",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromRegister",
              "brief": "Get a group of input or holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regType",
                  "type": "byte",
                  "type_name": "byte regType",
                  "default": null,
                  "description": "The register type; use 0x03 for a holding register (read/write) or 0x04 for an input register (read only)",
                  "direction": ""
                },
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "const char*",
                  "type_name": "const char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "aeb1599e18159c7b962d660b03cf50756",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromInputRegister",
              "brief": "Get a group of input registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "const char*",
                  "type_name": "const char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4cf1662e1e04ca662e7bdcb310450072",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromHoldingRegister",
              "brief": "Get a group of holding registers, convert them to characters and put them into the given character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The number of the first of the registers of interest.",
                  "direction": ""
                },
                {
                  "name": "outChar",
                  "type": "const char*",
                  "type_name": "const char* outChar",
                  "default": null,
                  "description": "A pointer or constant pointer to a character array to fill with the content of the registers.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return. NOTE: There are <em>TWO</em> characters per register!",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a4c459cebc94f5b3eae63b6606ebbf478",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "char*",
                  "type_name": "char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ae2e1148f24154427271144747d1c9c37",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToHoldingRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "char*",
                  "type_name": "char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af7256527d4f410bef4b7430a0a200f03",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "const char*",
                  "type_name": "const char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a33044d2df9bde61a8b824496438769e8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "charToHoldingRegister",
              "brief": "Set a series of holding registers to the characters in a character array.",
              "description": "",
              "return_value": "True if the registers were successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "regNum",
                  "type": "int",
                  "type_name": "int regNum",
                  "default": null,
                  "description": "The first of the registers of interest",
                  "direction": ""
                },
                {
                  "name": "inChar",
                  "type": "const char*",
                  "type_name": "const char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to set from in the array.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if the character array is two characters or less. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af4447d770262654524554dd558471788",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromFrame",
              "brief": "Read characters out of a modbus response frame and put them into a character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "outChar",
                  "type": "char*",
                  "type_name": "char* outChar",
                  "default": null,
                  "description": "A pointer to a character array to fill with the content of the response buffer.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abe55c5a76a875b32b3ffb5e81a524c97",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charFromFrame",
              "brief": "Read characters out of a modbus response frame and put them into a character array.",
              "description": "<p>There is no return from this function.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "outChar",
                  "type": "const char*",
                  "type_name": "const char* outChar",
                  "default": null,
                  "description": "A pointer to a character array to fill with the content of the response buffer.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to return.",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "3",
                  "description": "The starting position of the characters in the response frame. Optional with a default of 3.",
                  "direction": ""
                },
                {
                  "name": "sourceFrame",
                  "type": "byte*",
                  "type_name": "byte* sourceFrame",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The byte array to read from. Optional with a default of the built in response buffer.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a6e1d8075e992a172d566f9ca8a31eda0",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charToFrame",
              "brief": "Insert a character array into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inChar",
                  "type": "char*",
                  "type_name": "char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to copy from in the array.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "ad822262a85c8adbe74d1e2bbade383ef",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "charToFrame",
              "brief": "Insert a character array into the working byte frame.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inChar",
                  "type": "const char*",
                  "type_name": "const char* inChar",
                  "default": null,
                  "description": "A pointer or constant pointer to the character array to set the registers to.",
                  "direction": ""
                },
                {
                  "name": "charLength",
                  "type": "int",
                  "type_name": "int charLength",
                  "default": null,
                  "description": "The number of characters to copy from in the array.",
                  "direction": ""
                },
                {
                  "name": "destFrame",
                  "type": "byte*",
                  "type_name": "byte* destFrame",
                  "default": null,
                  "description": "The byte array to write to",
                  "direction": ""
                },
                {
                  "name": "start_index",
                  "type": "int",
                  "type_name": "int start_index",
                  "default": "0",
                  "description": "The starting position of the byte in the response frame. Optional with a default of 0.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Data Getters",
        "id": "data-getters",
        "description": "<p>Functions to get data from one or more registers, coils, or discrete inputs.</p><p><a name=\"data_getters\"></a></p><aside class=\"m-note m-default\"><h4>Remark</h4><p>If you do not supply an output buffer, these commands put data into the internal library buffer. With the exception of the commands to get a single coil or a single discrete output, these functions do <em>not</em> return the data directly.</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>These commands put only the <strong>content of the registers</strong> (or coils or inputs) into the buffer. They do <strong>not</strong> add the full returned modbus frame. The data in the buffer will be stripped of the modbus protocol bytes - including the address, command number, CRC, and any error codes. If there was no problem with the response, these functions return true. If one of these functions return false and you need to check for an error code, call the <a href=\"#a3be2e3d20db13fecb77d94c3aa97aeca\" class=\"m-doc\">getLastError()</a> function immediately after the command.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a202037bba4881a2c0be1634121e3bb52",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getRegisters",
              "brief": "Get data from either holding or input registers and copy the output to the supplied buffer.",
              "description": "<ul><li><em>If you provide a buffer,</em> this command puts only the <strong>content of the registers</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the provided buffer will be stripped of the modbus protocol characters.</li><li><em>If no buffer is provided,</em> the full modbus response is put into the internal library buffer and is <strong><em>not</em> stripped of the modbus protocol characters</strong>.</li></ul><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 125 registers can be read at once.</p></aside>",
              "return_value": "Zero if the response didn&#x27;t return the expected number of bytes or if there was an error in the modbus response; otherwise, the number of bytes in the response.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data. For a holding register readCommand = 0x03. For an input register readCommand = 0x04.",
                  "direction": ""
                },
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "byte*",
                  "type_name": "byte* buff",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "The buffer to copy the output data to.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a34cde02ebf26a7a74f47dc9c588ddee6",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getCoil",
              "brief": "Get the status of a single output coil.",
              "description": "<p>The read command for output coils is 0x01.</p>",
              "return_value": "The status of the coil (true for ON, false for OFF).",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "coilAddress",
                  "type": "int16_t",
                  "type_name": "int16_t coilAddress",
                  "default": null,
                  "description": "The address of the coil to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a24f235f3711d4428f5b7eb3d48c4d85b",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getCoils",
              "brief": "Get the data from a range of output coils. Each coil is a single bit.",
              "description": "<p>The read command for output coils is 0x01.</p><ul><li><em>If you provide a buffer,</em> this command puts only the <strong>content of the coils</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the provided buffer will be stripped of the modbus protocol characters.</li><li><em>If no buffer is provided,</em> the full modbus response is left in the internal library buffer and is <strong><em>not</em> stripped of the modbus protocol characters</strong>.</li></ul>",
              "return_value": "Zero if the response didn&#x27;t return the expected number of bytes or if there was an error in the modbus response; otherwise, the number of bytes in the response.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startCoil",
                  "type": "int16_t",
                  "type_name": "int16_t startCoil",
                  "default": null,
                  "description": "The starting coil number.",
                  "direction": ""
                },
                {
                  "name": "numCoils",
                  "type": "int16_t",
                  "type_name": "int16_t numCoils",
                  "default": null,
                  "description": "The number of coils to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "byte*",
                  "type_name": "byte* buff",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "A pre-allocated buffer to store the retrieved coil values.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af584be7d03a0ed90b0a8dc6df1239e84",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getDiscreteInput",
              "brief": "Get the status of a single discrete input.",
              "description": "",
              "return_value": "The status of the discrete input (true for ON, false for OFF).",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inputAddress",
                  "type": "int16_t",
                  "type_name": "int16_t inputAddress",
                  "default": null,
                  "description": "The address of the discrete input to read.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a65b6e81952f79264de41210e1b407e48",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getDiscreteInputs",
              "brief": "Get a range of discrete inputs.",
              "description": "<ul><li><em>If you provide a buffer,</em> this command puts only the <strong>content of the discrete inputs</strong> into the buffers. It does <strong>not</strong> add the full returned modbus frame. The data in the provided buffer will be stripped of the modbus protocol characters.</li><li><em>If no buffer is provided,</em> the full modbus response is put into the internal library buffer and is <strong><em>not</em> stripped of the modbus protocol characters</strong>.</li></ul>",
              "return_value": "Zero if the response didn&#x27;t return the expected number of bytes or if there was an error in the modbus response; otherwise, the number of bytes in the response.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startInput",
                  "type": "int16_t",
                  "type_name": "int16_t startInput",
                  "default": null,
                  "description": "The starting input number.",
                  "direction": ""
                },
                {
                  "name": "numInputs",
                  "type": "int16_t",
                  "type_name": "int16_t numInputs",
                  "default": null,
                  "description": "The number of discrete inputs to read.",
                  "direction": ""
                },
                {
                  "name": "buff",
                  "type": "byte*",
                  "type_name": "byte* buff",
                  "default": "<a href=\"#a3d34ed3d6d1e33ea994d84ec3738ccbe\" class=\"m-doc\">responseBuffer</a>",
                  "description": "A pre-allocated buffer to store the retrieved coil values.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Data Setters",
        "id": "data-setters",
        "description": "<p>Functions to set data to one or more holding registers or coils.</p><p><a name=\"data_setters\"></a></p><aside class=\"m-note m-default\"><h4>Remark</h4><p>If you do not supply an input buffer, these commands write data from the internal library buffer.</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>The data in the input buffer should <em>not</em> contain any modbus protocol bytes - including the address, command number or CRC. If there was no problem with the response on setting values, these functions return true. If one of these functions return false and you need to check for an error code, call the <a href=\"#a3be2e3d20db13fecb77d94c3aa97aeca\" class=\"m-doc\">getLastError()</a> function immediately after the command.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a14fa6fc8e308220479e4594b251821e0",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setRegisters",
              "brief": "Set the value of one or more holding registers using Modbus commands 0x06 or 0x10 (16).",
              "description": "<p>Input registers cannot be written by a Modbus controller/master</p><aside class=\"m-note m-default\"><h4>Remark</h4><p>No more than 123 registers can be set at once.</p></aside>",
              "return_value": "True if the modbus slave returned the expected number of input values; false if there was a failure.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The starting register number.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The number of registers to write.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte*",
                  "type_name": "byte* value",
                  "default": null,
                  "description": "A pointer to the byte array with the values to write.",
                  "direction": ""
                },
                {
                  "name": "forceMultiple",
                  "type": "bool",
                  "type_name": "bool forceMultiple",
                  "default": "false",
                  "description": "Set the forceMultiple boolean flag to &#x27;true&#x27; to force the use of the Modbus command for setting multiple resisters (0x10). This only applies if a single register is being set. Optional with a default value of false.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "abd2d65f5e55e689b365f102af04a1c10",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCoil",
              "brief": "Set the value of a single output coil using Modbus command 0x05.",
              "description": "<p>Output coils are single-bit values that can be either ON (1) or OFF (0). Input (discrete) contacts cannot be written by a Modbus controller/master.</p>",
              "return_value": "True if the proper modbus slave correctly responded to the command; false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "coilAddress",
                  "type": "int16_t",
                  "type_name": "int16_t coilAddress",
                  "default": null,
                  "description": "The address of the coil to set.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "bool",
                  "type_name": "bool value",
                  "default": null,
                  "description": "The value to set the coil to (true for ON, false for OFF).",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "af11fd29e45ff0d2f3b6b6ad193035713",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setCoils",
              "brief": "Set the value of one or more output coils using modbus command 0x0F.",
              "description": "<p>Input (discrete) contacts cannot be written by a Modbus controller/master.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function always uses Modbus command 0x0F</p></aside>",
              "return_value": "True if the proper modbus slave correctly responded to the command; false otherwise.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startCoil",
                  "type": "int16_t",
                  "type_name": "int16_t startCoil",
                  "default": null,
                  "description": "The address of the first coil to set.",
                  "direction": ""
                },
                {
                  "name": "numCoils",
                  "type": "int16_t",
                  "type_name": "int16_t numCoils",
                  "default": null,
                  "description": "The number of coils to set.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "byte*",
                  "type_name": "byte* value",
                  "default": null,
                  "description": "A pointer to a byte array containing the values to set the coils to.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Low level functions",
        "id": "low-level-functions",
        "description": "<p><a name=\"low_level_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a2dfe979ee77e8a56c24264b95d2b0c45",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getModbusData",
              "brief": "A generic get data function that can be used for any data type or size.",
              "description": "<p>Use these commands:</p><ul><li>For a coil readCommand = 0x01</li><li>For a discrete input readCommand = 0x02</li><li>For a holding register readCommand = 0x03</li><li>For an input register readCommand = 0x04.</li></ul><p>A register command will return 2 bytes per register - the size should be number registers x 2.</p><p>A coil or discrete input command will return 1 bit per coil - the size should be number coils / 8.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>You could use this function for other uncommon modbus commands (ie, get diagnostics). To do so:</p><ul><li>set the readCommand parameter to the appropriate command code</li><li>set the startAddress to the first two bytes of the command (ie, sub-function High and sub-function Low)</li><li>set the numChunks to the next two bytes of the command (ie, Data High and Data Low)</li><li>set the expectedReturnBytes to the expected size of the response (highly variable)</li></ul></aside>",
              "return_value": "Zero if the response didn&#x27;t return the expected number of bytes or if there was an error in the modbus response; otherwise, the number of bytes in the response.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "slaveId",
                  "type": "byte",
                  "type_name": "byte slaveId",
                  "default": null,
                  "description": "The modbus slave ID of the device to communicate with.",
                  "direction": ""
                },
                {
                  "name": "readCommand",
                  "type": "byte",
                  "type_name": "byte readCommand",
                  "default": null,
                  "description": "The command to use to read data",
                  "direction": ""
                },
                {
                  "name": "startAddress",
                  "type": "int16_t",
                  "type_name": "int16_t startAddress",
                  "default": null,
                  "description": "The first address to read from",
                  "direction": ""
                },
                {
                  "name": "numChunks",
                  "type": "int16_t",
                  "type_name": "int16_t numChunks",
                  "default": null,
                  "description": "The number of chunks of data to read",
                  "direction": ""
                },
                {
                  "name": "expectedReturnBytes",
                  "type": "uint8_t",
                  "type_name": "uint8_t expectedReturnBytes",
                  "default": "0",
                  "description": "The expected return size in bytes- set to 0 to have the size calculated based on the command and the number of chunks requested.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a5533b124b0d02db97cb24dc48123c256",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "sendCommand",
              "brief": "Send a command to the modbus slave.",
              "description": "<p>This is the lowest level function.</p><p>This takes a command, adds the proper CRC, sends it to the sensor bus, and listens for a response.</p><p>If it receives a response from the correct slave with the correct CRC, it returns the number of bytes received and put into the responseBuffer.</p><p>If it receives a response from the wrong slave, an incorrect CRC, or an exception, it will print notice of the error to the debugging stream and return 0xn0FF where n is the error code.</p><p>If no response is received, this returns 0.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The maximum response size for a Modbus RTU frame is 256 bytes (125 registers plus overhead). If you get a return value of &gt;256, it means there was an error and you should parse the error code.</p></aside>",
              "return_value": "The number of bytes received from the Modbus slave.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "command",
                  "type": "byte*",
                  "type_name": "byte* command",
                  "default": null,
                  "description": "The fully formed command to send to the Modbus slave.",
                  "direction": ""
                },
                {
                  "name": "commandLength",
                  "type": "int",
                  "type_name": "int commandLength",
                  "default": null,
                  "description": "The length of the outgoing command.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Debugging functions",
        "id": "debugging-functions",
        "description": "<p><a name=\"debugging_functions\"></a></p><p>These are purely debugging functions to print out the raw hex data sent between the Arduino and the modbus slave.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a80c6bfb4f354336a9ba80eca7f1c112c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a514e1115d953dfb9a32f5bc276d325da",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a06f481ac45211b2569730350f2a4e481",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Error functions",
        "id": "error-functions",
        "description": "<p><a name=\"error_functions\"></a></p><p>Functions to monitor the error codes.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a3be2e3d20db13fecb77d94c3aa97aeca",
              "include": null,
              "has_details": true,
              "type": "<a href=\"_sensor_modbus_master_8h.html#a32bdb92774b67a64a50bbf538fa10f05\" class=\"m-doc\">modbusErrorCode</a>",
              "name": "getLastError",
              "brief": "Get last modbus error code.",
              "description": "",
              "return_value": "The last modbus error code",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classmodbus_master.html",
              "id": "a017edaf4b1a534c834c6a7571927bb2a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "printLastError",
              "brief": "Prints information about the last error to the debugging stream.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If there is not a debugging stream set, this function will have no effect.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "modbusMaster",
        "classmodbus_master.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "modbusMaster::<wbr />"
  }
}