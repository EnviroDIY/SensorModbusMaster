name: Build Examples

# Triggers the workflow on push or pull request events
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine_library_source:
    name: determine_library_source
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    outputs:
      library_install_zip: ${{ steps.store_vars.outputs.library_install_zip }}
      library_install_git: ${{ steps.store_vars.outputs.library_install_git }}

    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables for pushes to any branch in EnviroDIY/SensorModbusMaster
        if: github.event_name == 'push'
        run: |
          echo "Push to commit ${GITHUB_SHA}"
          echo "LIBRARY_INSTALL_ZIP=https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.zip" >> $GITHUB_ENV
          echo "LIBRARY_INSTALL_GIT=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Set environment variable for PR's from any branch in EnviroDIY/SensorModbusMaster
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.name == github.repository
        run: |
          echo "Pull Request from the ${GITHUB_HEAD_REF} branch"
          echo "LIBRARY_INSTALL_ZIP=https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_HEAD_REF}.zip" >> $GITHUB_ENV
          echo "LIBRARY_INSTALL_GIT=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_HEAD_REF}" >> $GITHUB_ENV

      - name: Set environment variable for PR's from any fork of EnviroDIY/SensorModbusMaster
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.name != github.repository
        run: |
          echo "Pull Request from the fork ${{ github.event.pull_request.head.repo.full_name }} at ${{ github.event.pull_request.head.ref }}"
          echo "LIBRARY_INSTALL_ZIP=https://github.com/${{ github.event.pull_request.head.repo.full_name }}/archive/${{ github.event.pull_request.head.ref }}.zip" >> $GITHUB_ENV
          echo "LIBRARY_INSTALL_GIT=https://github.com${{ github.event.pull_request.head.repo.full_name }}.git#${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      - name: store enviroment variables as output
        id: store_vars
        run: |
          echo "library_install_zip=${{ env.LIBRARY_INSTALL_ZIP }}" >> $GITHUB_OUTPUT
          echo "library_install_git=${{ env.LIBRARY_INSTALL_GIT }}" >> $GITHUB_OUTPUT

  print_library_source:
    name: print_library_source
    runs-on: ubuntu-latest
    needs: determine_library_source
    steps:
      - name: Check the library installation source
        run: |
          echo "Link to zip for Arduino CLI testing install:"
          echo "${{ needs.determine_library_source.outputs.library_install_zip }}"
          echo
          echo "Git reference for PlatformIO testing install"
          echo "${{ needs.determine_library_source.outputs.library_install_git }}"

  build_ex_arduino:
    name: Arduino CLI ${{ matrix.example }}
    runs-on: ubuntu-latest
    needs: [determine_library_source]
    env:
      LIBRARY_INSTALL_ZIP: ${{ needs.determine_library_source.outputs.library_install_zip }}
    strategy:
      matrix:
        example: [examples/readWriteRegister]

    steps:
      - uses: actions/checkout@v4

      - name: Unused Step
        run: echo "This is needed to make the step number match with the PlatformIO jobs. =)"

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.2

      - name: Restore Arduino platforms and libraries
        uses: actions/cache@v4
        id: cache_libraries
        with:
          path: |
            home/arduino
          # if nothing in the dependencies.json file has changed, then it will
          # be a "cache hit" and we can restore libraries from cache and not
          # download them.  If it has changed we have to re-download.
          key: ${{ hashFiles('./examples/example_dependencies.json','continuous_integration/install-deps-arduino-cli.sh') }}

      # Install cores and library dependencies for the Arduino CLI, iff no cache
      - name: Install the Arduino libraries
        if: steps.cache_libraries.outputs.cache-hit != 'true'
        run: |
          chmod +x continuous_integration/install-deps-arduino-cli.sh
          sh continuous_integration/install-deps-arduino-cli.sh

      # Install SensorModbusMaster for the Arduino CLI
      - name: Install the testing version of Modular Sensors for the Arduino CLI
        run: |
          chmod +x continuous_integration/install-test-version-arduino-cli.sh
          sh continuous_integration/install-test-version-arduino-cli.sh

      - name: Include problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      # Run the script to compile the examples
      - name: Compile
        env:
          ARDUINO_CODE_SOURCE: ${{ matrix.example }}
        run: |
          status=0

          echo ::group::Uno
          arduino-cli compile --fqbn arduino:avr:uno --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mUno successfully compiled\e[0m"; else echo -e "\e[31mUno failed to compile\e[0m"; fi

          echo ::group::Mega
          arduino-cli compile --fqbn arduino:avr:mega --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mMega successfully compiled\e[0m"; else echo -e "\e[31mMega failed to compile\e[0m"; fi

          echo ::group::ArduinoZero
          arduino-cli compile --fqbn arduino:samd:mzero_bl --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mArduinoZero successfully compiled\e[0m"; else echo -e "\e[31mArduinoZero failed to compile\e[0m"; fi

          echo ::group::FeatherM0
          arduino-cli compile --fqbn adafruit:samd:adafruit_feather_m0 --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mFeatherM0 successfully compiled\e[0m"; else echo -e "\e[31mFeatherM0 failed to compile\e[0m"; fi

          echo ::group::FeatherM4
          arduino-cli compile --fqbn adafruit:samd:adafruit_feather_m4 --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mFeatherM0 successfully compiled\e[0m"; else echo -e "\e[31mFeatherM0 failed to compile\e[0m"; fi

          echo ::group::Mayfly
          arduino-cli compile --fqbn EnviroDIY:avr:envirodiy_mayfly --format text --warnings more --verbose --config-file continuous_integration/arduino_cli.yaml  ${{ matrix.example }} 2>&1 | tee output.log
          result_code=${PIPESTATUS[0]}
          if [ "$result_code" -eq "0" ] && [ "$status" -eq "0" ]; then status=0; else status=1; fi
          echo ::endgroup::
          if [ "$result_code" -eq "0" ]; then echo -e "\e[32mMayfly successfully compiled\e[0m"; else echo -e "\e[31mMayfly failed to compile\e[0m"; fi

          exit $status

      - name: Uninstall testing version of Modular Sensors before caching
        run: |
          arduino-cli --config-file continuous_integration/arduino_cli.yaml lib uninstall SensorModbusMaster

  build_pio:
    name: PlatformIO ${{ matrix.example }}
    runs-on: ubuntu-latest
    needs: [determine_library_source]
    env:
      LIBRARY_INSTALL_GIT: ${{ needs.determine_library_source.outputs.library_install_git }}
    strategy:
      matrix:
        example: [examples/readWriteRegister]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      # This should be pulled from cache, if there's not a new version
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Restore PlatformIO platforms and libraries
        uses: actions/cache@v4
        id: cache_libraries
        with:
          path: |
            ~/.platformio
          # if nothing in the example_dependencies.json file has changed, then it will
          # be a "cache hit" and we can restore libraries from cache and not
          # download them.  If it has changed we have to re-download.
          key: ${{ hashFiles('./examples/example_dependencies.json') }}

      # Install the dependencies for PlatformIO
      - name: Install the PlatformIO dependencies at global level
        if: steps.cache_libraries.outputs.cache-hit != 'true'
        run: |
          chmod +x continuous_integration/install-deps-platformio.sh
          sh continuous_integration/install-deps-platformio.sh
          cp -a /home/runner/.platformio/lib/. $GITHUB_WORKSPACE/lib/

      # Install SensorModbusMaster at the Global level for PlatformIO
      # Force install to get the right version
      - name: Install the testing version of SensorModbusMaster for PlatformIO
        run: |
          pio pkg install -g --library ${{ env.LIBRARY_INSTALL_GIT }}
          pio pkg list -g --only-libraries

      - name: Include problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Compile
        env:
          PLATFORMIO_CI_SRC: ${{ matrix.example }}
        run: |
          platformio ci --verbose --project-option='framework=arduino' --board=mayfly --board=uno --board=leonardo --board=yun --board=megaatmega2560 --board=nano_every --board=uno_wifi_rev2 --board=genuino101 --board=uno_r4_wifi --board=dueUSB --board=mkr1000USB --board=mkrvidor4000 --board=zero --board=adafruit_feather_m0 --board=adafruit_feather_m4 --board=teensy31 --board=bluepill_f103c8 --board=uno_pic32 --board=esp01 --board=nodemcuv2 --board=esp32dev --board=featheresp32 --board=adafruit_feather_esp32s2 --board=esp32-c3-devkitm-1 --board=pico

      - name: Uninstall testing version of Modular Sensors before caching
        run: |
          pio pkg uninstall -g --library SensorModbusMaster
